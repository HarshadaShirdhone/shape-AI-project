{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Harshada.ipynb",
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "metadata": {
        "id": "v5r3IwEOloVk",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "a3152ddd-d14b-471d-a9cc-efc1d2501ff0"
      },
      "source": [
        " \n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import sklearn\n",
        " \n",
        "from sklearn.datasets import load_boston\n",
        "df = load_boston()\n",
        " \n",
        "df.keys()\n",
        " \n",
        " \n",
        "boston = pd.DataFrame(df.data , columns = df.feature_names)\n",
        "boston.head()\n",
        " \n",
        "boston['MEDV'] = df.target\n",
        "boston.head()\n",
        " \n",
        "boston.isnull()\n",
        " \n",
        "from sklearn.model_selection import train_test_split\n",
        "X = boston.drop('MEDV' , axis = 1)\n",
        "Y = boston['MEDV']\n",
        "X_train , X_test ,Y_train ,Y_test = train_test_split( X,Y ,test_size = 0.15 ,random_state = 5)\n",
        "print(X_train.shape)\n",
        "print(X_test.shape)\n",
        "print(Y_train.shape)\n",
        "print(Y_test.shape)\n",
        " \n",
        "from sklearn.linear_model import LinearRegression\n",
        "from sklearn.metrics import mean_squared_error\n",
        " \n",
        "lin_model = LinearRegression()\n",
        "lin_model.fit(X_train ,Y_train )\n",
        " \n",
        " \n",
        "y_train_predict = lin_model.predict(X_train)\n",
        "rmse =(np.sqrt(mean_squared_error(Y_train , y_train_predict)))\n",
        " \n",
        "print(\" The Model Performance For Training  Set\")\n",
        "print(' RMSE is {} '.format(rmse))\n",
        " \n",
        "y_test_predict = lin_model.predict(X_test)\n",
        "rmse ==(np.sqrt(mean_squared_error(Y_test , y_test_predict)))\n",
        "print(\" The Model Performance For Testing Set\")\n",
        "print(' RMSE is {} '.format(rmse))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "(430, 13)\n",
            "(76, 13)\n",
            "(430,)\n",
            "(76,)\n",
            " The Model Performance For Training  Set\n",
            " RMSE is 4.710901797319796 \n",
            " The Model Performance For Testing Set\n",
            " RMSE is 4.710901797319796 \n"
          ],
          "name": "stdout"
        }
      ]
    }
  ]
}